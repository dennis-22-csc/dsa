Next, we look at doubly linked list.
What is a doubly linked list and how is it different from a singly linked list?
Well, a doubly linked list is a linked list whose nodes not only contain the address of the next node, but also contain the address of the previous node. 
Consequently, a doubly linkedlist can be traversed in forward and backward directions. Whereas, a singly linkedlist can only be traversed in forward direction.
Next, let's define the Node class for a doubly Linkedlist, then we will define the DoublyLinkedList class itself.

class Node:
    def __init__(self, node_data, previous_node = None, next_node = None):
        self.node_data = node_data
        self.previous_node = previous_node
        self.next_node = next_node

# Test
node1 = Node(23)
print(node1.node_data)
print(node1.previous_node)
print(node1.next_node)

With the above codes, we've got a working Node class that can be used to construct node objects for a doubly linked list.
Next, we create the DoublyLinkedList class.

class DoublyLinkedList:
    def __init__(self):
        self.current_node = None
        self.previous_node = None
        self.next_node = None

Next, we will create the add method. This method will be used to add data to the list. The method will take a data argument, internally create the relevant nodes, and the store the required data.
What will be the logic of such a method?
First of all, the first time the method is called, its data should be added to the current node, the previous and next node properties should be left alone.
The next time the method is called, its data should be added to a new node. The current node should be added to the previous node property of the new node. The new node should be added to the next node property of the current node.
This provides the general outline of how the method should operate.
Let's translate this to code.

class Node:
    def __init__(self, node_data, previous_node = None, next_node = None):
        self.node_data = node_data
        self.previous_node = previous_node
        self.next_node = next_node

class DoublyLinkedList:
    def __init__(self):
        self.current_node = None
        self.previous_node = None
        self.next_node = None

    def add(self, node_data):
        if self.current_node is None:
            new_node = Node(node_data)
            self.current_node = new_node
            return
        current_node = self.current_node
        new_node = Node(node_data, previous_node=current_node)
        self.current_node = new_node
        current_node.next_node = self.current_node

# Test
mylist = DoublyLinkedList()
mylist.add(20)
mylist.add(90)
mylist.add(40)
mylist.add(10)

# Print using previous node
print("Print using previous node")
print(mylist.current_node.node_data)
while mylist.current_node.previous_node:
    print(mylist.current_node.previous_node.node_data)
    mylist.current_node = mylist.current_node.previous_node

# Print using next node
print("Print using next node")
print(mylist.current_node.node_data)
while mylist.current_node.next_node:
    print(mylist.current_node.next_node.node_data)
    mylist.current_node = mylist.current_node.next_node


Next, let's make the DoublyLinkedList class iterable and indexable.
For the SinglyLinkedList class, I didn't try to understand the codes that was used to achieve it.
Let me go study the codes. 
Two methods were implemented for the purpose of making the SinglyLinkedList class iterable. The first is __iter__. The second is __next__.
These are supposedly inherited methods that are being overriden.  What are they all about? 
In the context of a custom object, for example, the DoublyLinkedList object, the inherited __iter__ method needs to be implemented to return the DoublyLinkedList object as an iterator.
All that's needed to be written is the below:

def __iter__(self):
        return self

On writing this code, my linter throws a non iterator returned error. Will the interpreter do the same? There is only one way to find out.
When I ran the codes, the interpreter didn't.
Next, I'm to implement the __next__ method. This method will return the next node in the list.
No, the method returns the data of the current node while pointing the current node to the next node. 

def __next__(self):
        if self.current_node is None:
            raise StopIteration
        node_data = self.current_node.node_data
        self.current_node = self.current_node.previous_node
        return node_data

On writing this code, my linter no longer throws a non iterator returned error for the __iter__ method. 

Next, let's implement the add_last method for the doubly linked list.
The add method is implemented such that the last added element appears first. We want the add_last method to ensure the last added element appears last.
Why is the last added element appearing first when the add method is used?
It's because the implementation of the __next__ method ensures that the data of the last added element is printed first.
So when we are implementing the add_last method, we must ensure that the current_node is the first node in the list rather than the last node in the list. But this will consitute a problem when we are trying to use the iterator.
All the same, let's write some code to see how things goes.
When the add_last method is called for the first time, there should not be a next node nor previous node associated with the node.
When it is called next, the new node should be assigned as the previous node of the current node and the current node should be assigned as the next node of the new node.
Why? What are we trying to achieve here?
Let's assume the data 20, 90, 40, 10.
We will start by adding 20. Next, we will add 90. Next, we will add 40. Finally, we will add 10.
When we add 10, the current node should be 20 and the previous node of 20 should be 90. How do we achieve this?
Well, it's become clear I've forgotten how I implemented this method in the SinglyLinkedList. When I checked the codes, I saw each time the add_last method is called, we have to iterate to the node whose next node is None and change it to point to the new node and the new node will now be the node whose next node is none. 

Let me spend some time understanding my implementation of the add method and add_last method for the singly linked list. Because it seems some things are not clear.
I've gone back. What I didn't clarify way back is that when we are implemnting the add_last method, we need to use a loop to switch the current node to the first node and when we do that the current node effectively becomes the first node. So when we are printing the current node, it is the first inserted data that will be printed rather than the last inserted data. 


I was able to come up with the below:

def add_last(self, node_data):
        if self.current_node is None:
            self.current_node = Node(node_data)
            return
        current_node = self.current_node
        while current_node.previous_node:
            current_node = current_node.previous_node
        new_node = Node(node_data, next_node=current_node)
        current_node.previous_node = new_node

It was through trial and error rather than a clear understanding of the implementation of the add_last method though.
The implementation of the __next__ method shaped how the code was written.
  
Next, let's add an element based on index.
I'll use the same approach I used for the singly linked list. 
I'll iterate through the nodes and check if the index of the currently iterated node matches the supplied index. If they match, I'll need to add the new node in between the currently iterated node and the next node.
Let me get my hand dirty. 
But before then, how exactly are we going to be reshuffling the node?
Can we work it out?
Sure.
Let's assume there are four nodes  20, 90, 40, 10
We want to add data 100 in index 2, at the moment, 40 is in index 2. 
We will iterate and check if the index of the iterated element matches index 2.
When the node is 40, the index will match.
We can now make 40 the next node of the new node and make the previous node of 40 the previous node of the new node, then assign the new node as the previous node of 40 while leaving the next node of 40 unchanged. It should still remain 10.
Let's bring this to life in code.
I managed to come up with the below, but the code is not working:

def add_at_index(self, node_data, index):
        count = 0
        current_node = self.current_node
        while current_node.previous_node:
            if count == index:
                new_node = Node(node_data, previous_node=current_node, next_node=current_node.previous_node)
                current_node.previous_node = new_node
                return
            count += 1
            current_node = current_node.previous_node


It's clear I don't remember how I achieved this in the singly linked list.
While I'm tempted to go over the implementation for the singly linked list, I won't go over it yet.

For the code, when i run things, the printing enters an infinite look. And that's because the function returned when the current node is the index to be shifted and the current node is pointing to the new node as previous node, and the new node is pointing to the same current node as previous node. I guess I now know why there is an infinite loop. The previous node of the new node should be the previous node of the current node. I should correct things.

The function is now working as expected:

def add_at_index(self, node_data, index):
        count = 1
        current_node = self.current_node
        while current_node.previous_node:
            if count == index:
                new_node = Node(node_data, previous_node=current_node.previous_node, next_node=current_node)
                current_node.previous_node = new_node
                return
            count += 1
            current_node = current_node.previous_node


But we still need to implement for index 0 as well as when index is out of range.

How do we implement for index 0? 
  
When the supplied index is 0, we need to assign the current node as the next node of the new node.
The previous node of the new node should be None. But if it is None, then we won't be able to print the other nodes. Because the iteration logic depends on the previous node having a value.

I went with the below implementation

def add_at_index(self, node_data, index):
        count = 1
        current_node = self.current_node
        while current_node.previous_node:
            if index == 0:
                new_node = Node(node_data, previous_node=current_node)
                self.current_node = new_node
                return
            if count == index:
                new_node = Node(node_data, previous_node=current_node.previous_node, next_node=current_node)
                current_node.previous_node = new_node
                return
            count += 1
            current_node = current_node.previous_node

Next, we will implement for index out of bounds. If the supplied index is higher than the highest index in the list, an Index error should be raised.
To achieve this, we will need to add a counter variable that will be incremented by 1 each time a new data is added to the list. This will give us the current total count of nodes which we will use to implement the index out of bound.

def add_at_index(self, node_data, index):
        count = 1
        current_node = self.current_node
        if index > self.count:
            raise IndexError("Index out of bounds")
        while current_node.previous_node:
            if index == 0:
                new_node = Node(node_data, previous_node=current_node)
                self.current_node = new_node
                self.count += 1
                return
            if count == index:
                new_node = Node(node_data, previous_node=current_node.previous_node, next_node=current_node)
                current_node.previous_node = new_node
                self.count += 1
                return
            current_node = current_node.previous_node


One last thing I need to implement for is when index is equal to self.count.
If index equal self.count, we should add the new data at the end of the list.
With the current implemntation of the list, current node could either be the first added data or it could be the last added data.  Whichever it is, we will be adding the new node at the end of the list.
When we've iterated through the list, we will arrive at the node whose previous node is empty. That node would consitute the last node to be printed. It is the node we will need to move.
We will make the node to be inserted to have a previous node that is empty.
The current node's previous node will now point to the new node.

def add_at_index(self, node_data, index):
        count = 1
        current_node = self.current_node
        if index > self.count:
            raise IndexError("Index out of bounds")
        while current_node.previous_node:
            if index == 0:
                new_node = Node(node_data, previous_node=current_node)
                self.current_node = new_node
                self.count += 1
                return
            if count == index:
                new_node = Node(node_data, previous_node=current_node.previous_node, next_node=current_node)
                current_node.previous_node = new_node
                self.count += 1
                return
            current_node = current_node.previous_node
        new_node = Node(node_data)
        current_node.previous_node = new_node
        
        
Below is the full code

class Node:
    def __init__(self, node_data, previous_node = None, next_node = None):
        self.node_data = node_data
        self.previous_node = previous_node
        self.next_node = next_node

class DoublyLinkedList:
    def __init__(self):
        self.current_node = None
        self.previous_node = None
        self.next_node = None
        self.count = 0

    def add(self, node_data):
        if self.current_node is None:
            new_node = Node(node_data)
            self.current_node = new_node
            self.count += 1
            return
        current_node = self.current_node
        new_node = Node(node_data, previous_node=current_node)
        self.current_node = new_node
        current_node.next_node = self.current_node
        self.count += 1

    def add_last(self, node_data):
        if self.current_node is None:
            self.current_node = Node(node_data)
            self.count += 1
            return
        current_node = self.current_node
        while current_node.previous_node:
            current_node = current_node.previous_node
        new_node = Node(node_data, next_node=current_node)
        current_node.previous_node = new_node
        self.count += 1

    def add_at_index(self, node_data, index):
        count = 1
        current_node = self.current_node
        if index > self.count:
            raise IndexError("Index out of bounds")
        while current_node.previous_node:
            if index == 0:
                new_node = Node(node_data, previous_node=current_node)
                self.current_node = new_node
                self.count += 1
                return
            if count == index:
                new_node = Node(node_data, previous_node=current_node.previous_node, next_node=current_node)
                current_node.previous_node = new_node
                self.count += 1
                return
            current_node = current_node.previous_node
        new_node = Node(node_data)
        current_node.previous_node = new_node

    def __iter__(self):
        return self
    def __next__(self):
        if self.current_node is None:
            raise StopIteration
        node_data = self.current_node.node_data
        self.current_node = self.current_node.previous_node
        return node_data

# Test
mylist = DoublyLinkedList()
mylist.add_last(20)
mylist.add_last(90)
mylist.add_last(40)
mylist.add_last(10)
mylist.add_at_index(100, 4)

for i in mylist:
    print(i)
    
Next, we will implement deleting an element based on index.
If index is 0, delete the current node.
If it is not, iterate through the nodes and if the supplied index matches the index of the currently iterated element, make the its next  node to  point to its previous node thereby cutting it off the chain.

def delete_at_index(self, index):
        count = 0
        current_node = self.current_node
        while current_node.previous_node:
            if count == index:
                current_node.next_node = current_node.previous_node
                return
            current_node = current_node.previous_node
            count += 1



It didn't work. And I think I know why.
We only reassigned its next node. We need to reassign the node too.
We have two nodes
The first is the previous node of the node to be deleted, the second is the next_node of the node to be deleted.
The node to be deleted is the current node.
How do we eliminate the current node?
The previous node of the node to be deleted has the current node as its next node.
The next node of the node to be deleted has the current node as its previous node.
We need to assign the next node of the node to be deleted to be the next node of the previous node of the node to be deleted.
We also need to the previous node of the node to be deleted to be the previous node of the next node of the node to be deleted.

def delete_at_index(self, index):
        count = 0
        current_node = self.current_node
        while current_node.previous_node:
            if count == index:
                current_node.previous_node.next_node = current_node.next_node
                current_node.next_node.previous_node = current_node.previous_node
                return
            current_node = current_node.previous_node
            count += 1


The above worked.
Does it work for index 0?
I actually didn't expect it to and it didnt.
I got a Nonetype error.

When the index is 0, current node won't have a next node.
So we probably only need to manipulate the previous node. 

Well, it didn't work

def delete_at_index(self, index):
        count = 0
        current_node = self.current_node
        if index == 0:
            current_node.previous_node.next_node = current_node.next_node
            return
        while current_node.previous_node:
            if count == index:
                current_node.previous_node.next_node = current_node.next_node
                current_node.next_node.previous_node = current_node.previous_node
                return
            current_node = current_node.previous_node
            count += 1
            
Let's reason things out.
For index 0, we want to delete the current node.
The current node has a previous node that contains a value.
That value is the next node.
We want that next node to replace the current node.
All we need to do is to assign the previous node of the current node to the current node.           

def delete_at_index(self, index):
        count = 0
        current_node = self.current_node
        if index == 0:
            self.current_node = current_node.previous_node
            return
        while current_node.previous_node:
            if count == index:
                current_node.previous_node.next_node = current_node.next_node
                current_node.next_node.previous_node = current_node.previous_node
                return
            current_node = current_node.previous_node
            count += 1

At the moment, we won't be able to delete the last index.
Deleting the last index will need to take place outside the while loop. 

After the while loop, we would have had access to the last node.
For the last node, previous node will be None.
But next node will contain a value.
We will assign the next node to the last node so the last node ceases to exist.
The problem is that when I run the below, I'm still seeing the last node 

def delete_at_index(self, index):
        count = 0
        current_node = self.current_node
        if index == 0:
            self.current_node = current_node.previous_node
            return
        while current_node.previous_node:
            if count == index:
                current_node.previous_node.next_node = current_node.next_node
                current_node.next_node.previous_node = current_node.previous_node
                return
            current_node = current_node.previous_node
            count += 1
        current_node = current_node.next_node
    
I think why that's the case is because the next node still has the last node as a previous node. 
So we need to change the previous node of the next node to point to the current last node. 
Isn't this a circular implementation? 
I wouldn't know until I write the codes.

def delete_at_index(self, index):
        count = 0
        current_node = self.current_node
        if index == 0:
            self.current_node = current_node.previous_node
            return
        while current_node.previous_node:
            if count == index:
                current_node.previous_node.next_node = current_node.next_node
                current_node.next_node.previous_node = current_node.previous_node
                return
            current_node = current_node.previous_node
            count += 1
        current_node = current_node.next_node
        current_node.previous_node = None

I solved the problem by simply assigning None to the previous node of the now current node. 

Finally, we need to implement for index out of bounds.
If index is greater than self.count, raise index error.

def delete_at_index(self, index):
        count = 0
        current_node = self.current_node
        if index >= self.count:
            raise IndexError("Index out of range")
        if index == 0:
            self.current_node = current_node.previous_node
            return
        while current_node.previous_node:
            if count == index:
                current_node.previous_node.next_node = current_node.next_node
                current_node.next_node.previous_node = current_node.previous_node
                return
            current_node = current_node.previous_node
            count += 1
        current_node = current_node.next_node
        current_node.previous_node = None

I had to add equal to to the condition.
If index greater than or equal to. 


