We will recreate the doubly linked list class so we can understand things better.
We will start with the below codes:
 
class Node:
    def __init__(self, data, previous_node=None, next_node=None):
        self.data = data
        self.previous_node = previous_node
        self.next_node = next_node

class DoublyLinkedList:
    def __init__(self):
        self.head_node = None 
        
Next, we will define the add_last and the add_first methods.
For the add_first method, the first added data will be the head node. For the add_last method, the last added data will be the head node.
When a node is inserted, two things need to happen. It's previous node property needs to point to the previous node, the next node property  of the previous node needs to point to the new node. The next node property of the new node will point to nothing.
Node 1, previous node and next node will be None
Node 2, Node 2 (new node) will have a previous node that points to node 1 (current head node) and a next node that points to nothing. Node 1 (current head node) next node will be modified to point to node 2 (new node)
Node 3, node 3 (new node) will have a previous node that points to node 2 (current head node) and a next node that points to nothing. Node 2 (current head node) next node will be modifed to point to node 3 (new node).
In all, the current head node must be chnaged.
If the next node of the new node will always point to nothing, it means if we are displaying the data using the head node, we can't use next node. We will instead use previous node.


class Node:
    def __init__(self, data, previous_node=None, next_node=None):
        self.data = data
        self.previous_node = previous_node
        self.next_node = next_node

class DoublyLinkedList:
    def __init__(self):
        self.head_node = None
    def add_last(self, data):
        if not self.head_node:
            new_node = Node(data)
            self.head_node = new_node
            return
        temp_node = self.head_node
        new_node = Node(data, previous_node=temp_node)
        temp_node.next_node = new_node
        self.head_node = new_node

# Tester codes
mylist = DoublyLinkedList()
mylist.add_last(20)
mylist.add_last(90)
mylist.add_last(40)
mylist.add_last(10)

# Access nodes using head and previous_node
node1= mylist.head_node
node2 = node1.previous_node
node3 = node2.previous_node
node4 = node3.previous_node # tail

# Access nodes using tail and next_node
node5 = node4.next_node
node6 = node5.next_node
node7 = node6.next_node

print("Data using head")
print(node1.data)
print(node2.data)
print(node3.data)
print(node4.data)

print("Data using tail")
print(node4.data)
print(node5.data)
print(node6.data)
print(node7.data)


To implement the add_first method, the self.head_node won't change.
But we will need to modify its next_node property to point to the second inserted node. Then the previous node property of the second inserted node should point to the head node. The next_node property of the second inserted node should point to nothing. But in the third insert, the next_node property of the second inserted node should point to the third node while the previous node property of the third node should point to the second node.
How do we access the second inserted node in the third insertion?
We access it via the next_node property of the head node.
How do we access the third inserted node in the fourth insertion?
You keep forgetting that given the head_node, you can access any other node in a linked list.
All you have to do is run a while loop.
I keep forgetting.

class Node:
    def __init__(self, data, previous_node=None, next_node=None):
        self.data = data
        self.previous_node = previous_node
        self.next_node = next_node

class DoublyLinkedList:
    def __init__(self):
        self.head_node = None
    def add_last(self, data):
        if not self.head_node:
            new_node = Node(data)
            self.head_node = new_node
            return
        temp_node = self.head_node
        new_node = Node(data, previous_node=temp_node)
        temp_node.next_node = new_node
        self.head_node = new_node
    def add_first(self, data):
        if not self.head_node:
            new_node = Node(data)
            self.head_node = new_node
            return
        temp_node = self.head_node
        while temp_node.next_node:
            temp_node = temp_node.next_node
        new_node = Node(data, previous_node=temp_node)
        temp_node.next_node = new_node

# Tester codes
mylist = DoublyLinkedList()
mylist.add_first(20)
mylist.add_first(90)
mylist.add_first(40)
mylist.add_first(10)

# Access nodes using head and next_node
node1= mylist.head_node
node2 = node1.next_node
node3 = node2.next_node
node4 = node3.next_node # tail

# Access nodes using tail and previous_node
node5 = node4.previous_node
node6 = node5.previous_node
node7 = node6.previous_node

print("Data using head")
print(node1.data)
print(node2.data)
print(node3.data)
print(node4.data)

print("Data using tail")
print(node4.data)
print(node5.data)
print(node6.data)
print(node7.data)


In the below, the class have been made iterable:

class Node:
    def __init__(self, data, previous_node=None, next_node=None):
        self.data = data
        self.previous_node = previous_node
        self.next_node = next_node

class DoublyLinkedList:
    def __init__(self):
        self.head_node = None
        self.current_node = None
        self.forward = None
    def add_last(self, data):
        self.forward = False
        if not self.head_node:
            new_node = Node(data)
            self.head_node = new_node
            return
        temp_node = self.head_node
        new_node = Node(data, previous_node=temp_node)
        temp_node.next_node = new_node
        self.head_node = new_node
    def add_first(self, data):
        self.forward = True
        if not self.head_node:
            new_node = Node(data)
            self.head_node = new_node
            return
        temp_node = self.head_node
        while temp_node.next_node:
            temp_node = temp_node.next_node
        new_node = Node(data, previous_node=temp_node)
        temp_node.next_node = new_node
    def __iter__(self):
        self.current_node = self.head_node
        return self
    def __next__(self):
        if self.current_node is None:
            raise StopIteration
        data = self.current_node.data
        if self.forward:
            self.current_node = self.current_node.next_node
        else:
            self.current_node = self.current_node.previous_node
        return data


# Tester codes
mylist = DoublyLinkedList()
mylist.add_last(20)
mylist.add_last(90)
mylist.add_last(40)
mylist.add_last(10)

for i in mylist:
    print(i)
    
Next, let's implement the add_at_index method.
This method will take a data and an index and add the data in the the position associated with the index.
To achieve this, we will need to iterate to the node precedeing the index, then reassign things.
Specifically, let's assume the add_first method was used to add the data, we will iterate to before the node matching the index, then we will change its next_node property to point to the new node. The next_node property of the new node will then point to the previous next node property of the iterated node. The previous node property of the new node will point to the currently iterated node. The previous node property of the previous next node will then point to the new node.
If the add_last method is used, we will still iterate to the node matching the index(using the  previous_node).
Wait isnt there a better way to implement the add_first and add_last methods that will  not lead to us using two different properties to traverse the nodes?
You're the one that missed the point of the add_first and add_last method.
The add first method adds a node at the beginning of the linked list. The add_last method adds a node at the end of the linked list.
But when the data is to be traversed, it should start from the head node. This means whether or not the add_first or add_last method is used, the head_node should always be the first node.



But then we will still need to implement for index 0, we will still need to implement for when the supplied index is the same as the number of elements, then we still need to raise an index out of bounds exception.
