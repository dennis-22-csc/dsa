24 - Swap Nodes in Pairs

Given a linked list, swap every two adjacent nodes and return its head. You must solve the problem without modifying the values in the list's nodes (i.e., only nodes themselves may be changed.)

 

Example 1:
Input: head = [1,2,3,4]
Output: [2,1,4,3]
Example 2:

Input: head = []
Output: []
Example 3:

Input: head = [1]
Output: [1]


How can we swap the nodes?
We can swap the nodes by having access to the current node and next node.
We can have access to both nodes in the current iteration of the loop.
But what should happen when next node is none but there is a current node?
Let's assume current_node is the loop controller, at some point, current_node.next_node will be None.
But we will be swapping none with current node which shouldn't be.
We should therefore not swap None with current node.
The loop should therefore terminate when there is no next node.
Okay. But what would happen to the last node?
Let's trace how we can swap the modes first.
We will use current_node next node as controlling variable.
Iteration 1, we will make next node point to current node and current node point to None.
We will then make the current node previous node so it can be used in the next iteration.
In the next iteration, we will make the next node point to the current node and the current node point to None.
We will then make the previous node point to the next node and make the current node the previous node.
Wait. If in iteration 2, previous node will point to next node, how about in iteration 1?
Because we assume in iteration 1, previous will be None.
If at the beginning of the loop, previous node is the current node, then inside the loop, we make previous node point to the next node before making the next node point to the current node, we then make the current node which is the previous node to point to None, we will then make the current node again the previous node, the logic will work.
Let's assume there is one more node and there is no next node. 
Before that happens, it's previous node has been made to point to the previous previous node while the previous previous node has been made to point to None. 
We need to make that node point to the last node and make the last node point to None. 
All of these can be solved with if statements inside the loop and making just the current node the controlling variable, but is there a better way?

I couldn't get the logic right:

def swap_nodes_in_pairs(mylist):
	current_node = mylist.head_node
	while current_node:
	if current_node.next_node:
		next_node = current_node.next_node.next_node
		previous_node.next_node = current_node.next_node
		current_node.next_node.next_node = current_node
		current_node.next_node = None
		previous_node = current_node
	else:
		previous_node.next_node = current_node
	current_node = next_node 
	


If there is a next node, swap.
Else make current node the next node which is None.

Updated solution:

1, 2, 3, 4, 5

When current is 2, swap current and previous.
2, 1, 3, 4, 5
1 needs to be made to point to the next node of 2.

When current is 4, swap current and previous.
2, 1, 4, 3, 5
3 needs to be made to point to the next node of 4.

By this, if the loop exits when current is None, there won't be a need for further action.

from singly_linked_list import SinglyLinkedList

def swap_nodes(mylist):
	current_node = mylist.head_node
	previous_node = None
	count = 0
	while current_node and current_node.next_node:
		next_node_next_node = current_node.next_node.next_node
		next_node = current_node.next_node
		next_node.next_node = current_node
		current_node.next_node = next_node_next_node
		if previous_node:
			previous_node.next_node = next_node
		count += 1
		if count == 1:
			mylist.head_node = next_node 
		previous_node = current_node
		current_node = next_node_next_node

mylist = SinglyLinkedList()
mylist.add_first(1)
#mylist.add_last(2)
#mylist.add_last(3)
#mylist.add_last(4)
#mylist.add(5)

swap_nodes(mylist)
for i in mylist:
	print(i)
