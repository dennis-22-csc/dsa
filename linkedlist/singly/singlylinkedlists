Singly linked list
It has been said that a singly linkedlist is a linkedlist implemented such that the nodes only connects in one direction (forward or 
backward).  
To implement a singly linkedlist, we need to solve two major problems:
1. How to implement a node
2. How to implement the connections.
What is a node and how can it be implemented?
While it has been said that a node is a point in a diagram at which lines intersect or branch, we will reconceptualize a node as data in a diagram connected together by connecting lines. These connecting lines could be forward and/or backward.
How do we implement a node?
To implement a node, we need to think of the data we want to store as nodes. 
Do we want to store integers as nodes? Or string as nodes? Or objects as nodes?
We could as well store multiple individual data as nodes.
In solving the programming problem we want to solve, we will likely know what data we want to store as nodes.
Let's assume we will be storing integers as nodes, the next thing we need to do is create a Node class and declare a property of type int.
Since python is not typed, we will just declare a property. 
Once we've done that, we now have a class we can use to construct node objects that would be connected together by an imaginary connecting lines.
The below codes creates a Node class

# Create class Node
class Node:
    def __init__(self, data):
        self.data = data

# Tester codes
node = Node(20) # Create node object
print(node.data) # Print data in node object

node = Node(70) # Create node object
print(node.data) # Print data in node object

node = Node(10) # Create node object
print(node.data) # Print data in node object

node = Node(50) # Create node object
print(node.data) # Print data in node object

node = Node(90) # Create node object
print(node.data) # Print data in node object

Tester codes were included for the purpose of testing the class.
In the tester codes, you can see that five node objects were created and the data in each node were printed.

For the purpose of creating a singly linkedlist, we've solved the problem of implementing a node. The next challenge to be tackcled is the problem of connecting the nodes. How do we implement the connection?
How do we connect the five node objects we created so that they make up a linkedlist?
Because at the moment, they are just individual isolated nodes.

To implement the connection of nodes in a singly linkedlist, we introduce the concept of references traditionally known as the concept of pointers.
The idea is that if we want to connect node A to node B, it means we want to draw an imaginary line that will take us from node A to node B. What we need to achieve this is for us to store the address of node B alongside the data of node A so that when we are accessing the data of node A, we can also access the address of node B and use the address to locate node B.
The address of an object is usually called a reference or a pointer.

To implement the connection of nodes, we will need to modify the Node class so that the address of the next node to be accessed will be a property in the current node.  What name can we give to this property? We can give it the name next_node.

The codes have been modified to the below:

# Create class Node
class Node:
    def __init__(self, data, next_node):
        self.data = data
        self.next_node = next_node

# Tester codes
node1 = Node(20, None) # Create node object
print(node1.data) # Print data in node object
print(node1.next_node) # Print address of next node object

node2 = Node(70, node1) # Create node object
print(node2.data) # Print data in node object
print(node2.next_node) # Print address of next node object

node3 = Node(10, node2) # Create node object
print(node3.data) # Print data in node object
print(node3.next_node) # Print address of next node object

node4 = Node(50, node3) # Create node object
print(node4.data) # Print data in node object
print(node4.next_node) # Print address of next node object

node5 = Node(90, node4) # Create node object
print(node5.data) # Print data in node object
print(node5.next_node) # Print address of next node object

 
At this point, we've implemented a node and we've also modified the node such that it will include a reference to the next node, next, we need to create a LinkedList object.
This object is an object that will comprise of node objects each of which contains data and a reference to the next node in the list.
The LinkedList object will have an add method that will be used to add data(nodes) to the list. Internally in the add method, the address of the next node will be stored alongside the data of the current node.

Creating a LinkedList class is not hard. Creating the add method is what is hard. But how can we define such a method? How will the method work? Let's iron out the details.
The method will take a value as an argument, then internally, it will create a Node object and insert that value in the Node object.
Now, the first time this method is called, the value None should be specified as the value of the next_node property of the Node object.
Subsequent time this method is called, a value should be passed. 
How then do we code the method?
Well, we can introduce a count variable that will be incremented by 1 each time the add method is called. If the count is less than or equal to 1, the value None should be specified as the value of the next_node property, else, a value should be provided. Problem solved.

# Create class Node
class Node:
    def __init__(self, data, next_node):
        self.data = data
        self.next_node = next_node

# Create class SinglyLinkedList
class SinglyLinkedList:
    def __init__(self):
        self.node = None
        self.count = 0

    def add(self, node_data):
        self.count += 1
        if self.count <= 1:
            self.node = Node(node_data, None)
        else:
            self.node = Node(node_data, self.node)

# Tester codes
mylist = SinglyLinkedList()
mylist.add(20)
mylist.add(90)
mylist.add(40)
mylist.add(10)

print(mylist.node.data)
print(mylist.node.next_node)

Problem looked to be solved, except that we can iterate through the list and print out its element, we can't also use index to access elements in the list.
Based on the current implementation, we can only access the first node. But remember, the first_node contains the address of the next_node, can we use that to access all the nodes up to the last node?
Let's see. 

Well, I was able to:

# Create class Node
class Node:
    def __init__(self, data, next_node):
        self.data = data
        self.next_node = next_node

# Create class SinglyLinkedList
class SinglyLinkedList:
    def __init__(self):
        self.node = None
        self.count = 0

    def add(self, node_data):
        self.count += 1
        if self.count <= 1:
            self.node = Node(node_data, None)
        else:
            self.node = Node(node_data, self.node)

# Tester codes
mylist = SinglyLinkedList()
mylist.add(20)
mylist.add(90)
mylist.add(40)
mylist.add(10)

print(mylist.node.data)

node2 = mylist.node.next_node
print(node2.data)

node3 = node2.next_node
print(node3.data)

node4 = node3.next_node
print(node4.data)

Let's see how we can make the SinglyLinkedList class iterable and indexable.

# Create class Node
class Node:
    def __init__(self, data, next_node):
        self.data = data
        self.next_node = next_node

# Create class SinglyLinkedList
class SinglyLinkedList:
    def __init__(self):
        self.node = None
        self.current_node = None
        self.count = 0

    def add(self, node_data):
        self.count += 1
        if self.count <= 1:
            self.node = Node(node_data, None)
        else:
            self.node = Node(node_data, self.node)

    def __iter__(self):
        self.current_node = self.node
        return self

    def __next__(self):
        if self.current_node is None:
            raise StopIteration

        data = self.current_node.data
        self.current_node = self.current_node.next_node
        return data

    def __getitem__(self, index):
        if index < 0 or index >= self.count:
            raise IndexError("Index out of range")

        current_node = self.node
        for _ in range(index):
            current_node = current_node.next_node

        return current_node.data

# Tester codes
mylist = SinglyLinkedList()
mylist.add(20)
mylist.add(90)
mylist.add(40)
mylist.add(10)

# Test that the list is iterable
for i in mylist:
    print(i)

# Test that the list is indexable
print(mylist[3])

# Test that an index out of range exception will be thrown
print(mylist[4])


Implementing the __iter__() and __next__() methods makes the list iterable, while implementing the  __getitem__() method makes the list items accessible using index, that is indexable.


If you look closely at the implementation of the add method, it adds a new data to the beginning of the list. This means when printing data from the list, the last added data will be the first printed data. How do we define a method that adds new data to the end of the list so that when the data is printed, the first added data will be the first printed data?

What are we trying to achieve here?
In the current implementation, the first node to be created will be created with the None value passed as its next_node property.
Now, we need a way to ensure that when we are creating the second node, the next_node property of the first node is changed to the address of the second node, while the next_node property of the second node(current node) is designated as None.
How do we accomplish this?
Let's see.

The below implements the logic:

def add_last(self, node_data):
        self.count += 1
        if self.count <= 1:
            self.node = Node(node_data, None)
        else:
            self.current_node = Node(node_data, None)
            self.node.next_node = self.current_node

With this implementation, the next_node value of the head node will be replaced each time the add_last method is called. The last time it is called, it is the address of the current node that will be there and the current node is the last data to be inserted.
This will ensure only the first and last data is printed and not the data in between.
The data of the head node has not changed. Only the next_node addresses changes. 

Integrate the method and test it using the below:

# Tester codes
mylist = SinglyLinkedList()
mylist.add_last(20)
mylist.add_last(90)
mylist.add_last(40)
mylist.add_last(10)

print(mylist.node.data)

node2 = mylist.node.next_node
print(node2.data)

node3 = node2.next_node
print(node3.data)


The first and last data to be inserted will be printed, then you will get an exception.

For this particular problem, I had to look up a solution.
The problem was solved using an understanding of traversing a linkedlist.
I didn't understand the linkedlist I created using those tester codes can be traversed as demonstrated below:

# Create class Node
class Node:
    def __init__(self, data, next_node):
        self.data = data
        self.next_node = next_node

# Tester codes
node1 = Node(20, None)
node2 = Node(70, node1)
node3 = Node(10, node2)
node4 = Node(50, node3)
node5 = Node(90, node4)

temp_node = node5
while temp_node.next_node:
    print(temp_node.data)
    temp_node = temp_node.next_node
print(temp_node.data)

Create a file node.py and test the codes.
All the data in the linkedlist will be printed.
Now, what this teaches is that you can use the current node to get to the last node and when you get to the last node, you can change the next_node property to point to a value other than None.

Why is temp_node introduced?
Let's see what would happen when it is not introduced.

# Create class Node
class Node:
    def __init__(self, data, next_node):
        self.data = data
        self.next_node = next_node

# Tester codes
node1 = Node(20, None)
node2 = Node(70, node1)
node3 = Node(10, node2)
node4 = Node(50, node3)
node5 = Node(90, node4)

while node5.next_node:
    print(node5.data)
    node5 = node5.next_node
print(node5.data)

Nothing happended. All the data were printed.

So now, how do we ensure that when we are creating the second node(current node), the next_node property of the first node(previous node) is changed from None to point to the second node(current node) while ensuring that the next_node property of the second node(current node) points to None?
Well, by traversing the linkedlist inside the add_last method until we get to the node whose next_node property is None. 
When we get to the node, we will now change the value assigned to its next_node property by assigning the current node (The node whose next_node property will point to None) to it.

The below will be the created function:

def add_last(self, node_data):
        self.count += 1
        if self.count <= 1:
            self.node = Node(node_data, None)
        else:
            temp_node = self.node
            # while temp_node.next_node is not None, switch to next node
            while temp_node.next_node:
                temp_node = temp_node.next_node
            # when temp_node.next_node is None, change next_node
            temp_node.next_node = Node(node_data, None)


Why is temp_node introduced? Why can't self.node be directly used?
The thing is the while loop will change the address of self.node to become the address of the node whose next_node property was None.
When this address is changed everytime the add_last method is called, the last time it is called, self.node will point to the address of the node whose next_node property was last None, then the next_property of self.node will point to the node whose next_node property is None. This mean when you try to print the list, only two nodes will be printed no matter how many nodes were created.
But by introducing a temp_node, we can arrive at the node whose next_node property is None without changing the address of next_node, assign the node to temp_node and whatever we assihgn to temp_node becomes the new value of self.node. Pointers at work.
You can use a pointer to an object to change the value of the object without changing the address of the object. Temp node is a pointer to the object self.node



We've created functions to insert elements at the beginning and end of a singly linked list, how about a function that inserts an element at any index in a singly linked list given an index?
How can we insert an element to a singly linked list using an index?
Well, if we will be using indexes, it means we will be shifting one of the nodes, if not two.
Let's see how it will goes.
At the moment, I can iterate through the list which means I can count the number of elements in the list.
While counting, if the count matches the index, I can change the next_node of the currently iterated node to that of the node to be inserted. Then the next node of the node to be inserted will be the previous next node of the currently iterated node.
Interesting. 
Let me be more specific. 
Assume I want to insert 34 in the index 2, I'll iterate through each node in the list starting from the current and working backwards. 
Let's assume the current count of nodes is 5, to insert the element at index 2, I need to only count two nodes backwards. That is, current node, the node after it, and the node after that node. This means the count needs to be 3. When the count is 3, it means I've iterated two nodes backwards excluding the current node. When we iterate the current node, the count is still 5.

I managed to come up with the below code:

def add_at_index(self, node_data, index):
        temp_count = 1
        temp_node = self.node
        if index < 0 or index >= self.count:
            raise IndexError("Index out of range")
        while temp_node.next_node:
            if index == temp_count:
                temp_node.next_node = Node(node_data, temp_node.next_node)
                return
            temp_node = temp_node.next_node
            temp_count += 1
        temp_node.next_node = Node(node_data, temp_node.next_node)

Note: I didn't work backward. I worked forward. But the idea still remains.

But there is a challenge. When 0 is specified as index, the data gets inserted in the next node rather than there being a swap of position. How do I get the current node to swap position with the new node?
The new node needs to point to the current node and the current node will retain its next node.

I modified the code to the below to solve the problem after trial and error:

def add_at_index(self, node_data, index):
        temp_count = 1
        temp_node = self.node
        if index < 0 or index > self.count:
            raise IndexError("Index out of range")
        while temp_node.next_node:
            if index == 0:
                self.node = Node(node_data, self.node)
                return
            if index == temp_count:
                temp_node.next_node = Node(node_data, temp_node.next_node)
                return
            temp_node = temp_node.next_node
            temp_count += 1
        temp_node.next_node = Node(node_data, temp_node.next_node)


How do we delete an element from a singly linked list?
First of all, the element exists as node and it only exists because it is inside the next_node property of another node. If we change the next_node property to the node that follows the node to be deleted, the node to be deleted ceases to exist. At least, in the linkedlist.

The logic worked:

def delete_at_index(self, index):
        temp_count = 1
        temp_node = self.node
        if index < 0 or index >=self.count:
            raise IndexError("Index out of range")
        while temp_node.next_node:
            if index == temp_count:
                temp_node.next_node = temp_node.next_node.next_node
                return
            temp_node = temp_node.next_node
            temp_count += 1
        temp_node.next_node = temp_node.next_node.next_node

But I'm yet to figure out how to delete the element at index 0. That is, the current node. The last inserted node.
I wrote some code and I was getting some none type error for next_node.
Let me check to see the value in the next_node property of the current node.
It contained a Node object. I knew it will contain a Node object since it is the start of the iteration. Where then is the None error coming from?
Let me run the delete method without trying to print the list items.
Wow. I wrote the same code and because I added a return after the block of code deleting element at index 0, I no longer experienced the None type error.

The below code works:

def delete_at_index(self, index):
        temp_count = 1
        temp_node = self.node
        if index < 0 or index >=self.count:
            raise IndexError("Index out of range")
        while temp_node.next_node:
            if index == 0:
                self.node = self.node.next_node
                return
            if index == temp_count:
                temp_node.next_node = temp_node.next_node.next_node
                return
            temp_node = temp_node.next_node
            temp_count += 1
        temp_node.next_node = temp_node.next_node.next_node

---

