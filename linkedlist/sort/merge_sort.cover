    1: from singly_linked_list import SinglyLinkedList
       
    1: def print_list(head):
    1:     if head is None:
               print(' ')
               return
    1:     curr_node = head
    6:     while curr_node:
    5:         print(curr_node.node_data, end = " ")
    5:         curr_node = curr_node.next_node
    1:     print(' ')
       
    1: count = 0
    1: def merge_sort(head_node):
           global count
    9:     count += 1
    9:     print("count ", count)
    9:     if head_node:
    9:         print("head ", head_node.node_data)
           else:
               print("head ", head_node)
    9:     if head_node is None or head_node.next_node is None:
    5:         return head_node
       
           # Divide the linked list into two halves.
    4:     print("calling find middle")
    4:     mid_node = find_middle_node(head_node)
    4:     print("returned find middle")
    4:     print("mid node ", mid_node.node_data)
    4:     mid_node_next = mid_node.next_node
    4:     print("mid node next ", mid_node_next.node_data)
    4:     print("mud node next address", mid_node_next)
    4:     mid_node.next_node = None
    4:     print("calling left merge sort")
    4:     left_head = merge_sort(head_node)
    4:     print("returned left merge sort")
    4:     print("hello")
    4:     if left_head:
    4:         print("left head address", left_head)
    4:         print("left head ", left_head.node_data) 
           else:
               print("left head ", left_head)
    4:     print("calling right merge sort")
    4:     if mid_node_next:
    4:         print("mid node nextie", mid_node_next.node_data)
    4:         print("mid node nextie address", mid_node_next)
    4:     right_head = merge_sort(mid_node_next)
    4:     print("returned right merge sort")
    4:     if right_head:
    4:         print("right head ", right_head.node_data)
           else:
               print("right head ", right_head)
    4:     sorted_head =  merge_sorted(left_head, right_head)
    4:     if sorted_head:
    4:         print("sorted head address", sorted_head)
    4:         print("sorted head", sorted_head.node_data)
           else:
               print("sorted head", sorted_head)
    4:     return sorted_head
    1: def find_middle_node(head_node):
    4:     if not head_node:
               return head_node
    4:     slow_node = head_node
    4:     fast_node = head_node
       
    7:     while fast_node.next_node and fast_node.next_node.next_node:
    3:         slow_node = slow_node.next_node
    3:         fast_node = fast_node.next_node.next_node
       
    4:     return slow_node
       
    1: def merge_sorted(left_head, right_head):
           global count
   12:     count += 1
   12:     print("merge count ", count)
           #print("left head ", left_head.node_data)
           #print("right head ", right_head.node_data)
           #print("left head next", left_head.next_node.node_data)
           #return
   12:     result = None
   12:     if not left_head:
    3:         return right_head
    9:     if not right_head:
    1:         return left_head
       
    8:     if left_head.node_data <= right_head.node_data:
    6:         print("left head ", left_head.node_data)
    6:         print("right head ", right_head.node_data)
    6:         if left_head.next_node:
    3:             print("left head next node ", left_head.next_node.node_data)
               else:
    3:             print("left head next node", left_head.next_node)
    6:         result = left_head
    6:         result.next_node = merge_sorted(left_head.next_node, right_head)
           else:
    2:         if left_head:
    2:             print("left head ", left_head.node_data)
               else:
                   print("left head ", left_head)
    2:         if right_head:
    2:             print("right head ", right_head.node_data)
               else:
                   print("right head ", right_head)
    2:         if right_head.next_node:
    1:             print("right head next node ", right_head.next_node.node_data)
               else:
    1:             print("right head next node", right_head.next_node)
    2:         result = right_head
    2:         result.next_node = merge_sorted(left_head, right_head.next_node)
       
    8:     return result
       
    1: mylist = SinglyLinkedList()
    1: mylist.add(10)
    1: mylist.add_first(30)
    1: mylist.add_last(50)
    1: mylist.add_last(20)
    1: mylist.add(70)
    1: print("calling merge sort")
    1: new_head = merge_sort(mylist.head_node)
    1: print("returned merge sort")
    1: print_list(new_head)
       
