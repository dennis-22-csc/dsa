So lets reimplement the circularsinglylinkedlist.

The below creates the relevant classes:

class Node:
    def __init__(self, data, next_node=None):
        self.data = data
        self.next_node = next_node

class CircularSinglyLinkedList:
    def __init__(self):
        self.head_node = None
        
 Next, we will add the add method:
 
 class Node:
    def __init__(self, data, next_node=None):
        self.data = data
        self.next_node = next_node

class CircularSinglyLinkedList:
    def __init__(self):
        self.head_node = None

    def add(self, data):
        if not self.head_node:
            new_node = Node(data)
            self.head_node = new_node
            return
            
Next, we will add the add_first and add_last methods.  
The add_first method will replace the head_node with the new_node and make the new head node point to the old head node.  

class Node:
    def __init__(self, data, next_node=None):
        self.data = data
        self.next_node = next_node

class CircularSinglyLinkedList:
    def __init__(self):
        self.head_node = None

    def add(self, data):
        if not self.head_node:
            new_node = Node(data)
            self.head_node = new_node
            return

    def add_first(self, data):
        if not self.head_node:
            self.add(data)
            return
        old_head_node = self.head_node
        new_head_node = Node(data, old_head_node)
        self.head_node = new_head_node

mylist = CircularSinglyLinkedList()
mylist.add_first(20)
mylist.add_first(90)
mylist.add_first(40)
mylist.add_first(10)

node1 = mylist.head_node
node2 = node1.next_node
node3 = node2.next_node
node4 = node3.next_node

print(node1.data)
print(node2.data)
print(node3.data)
print(node4.data)  

For now, all we've done is create a singly linked list. We havent made the linked list circular. To make it circular, we will need to have the address of the original headnode  and assign the new head node as its next node. This connects the original head node to the new head node.  A loop will be needed to achieve this.  
Each time the method is called, we will not only switch the head node, we will also iterate through the nodes so we can connect the new head node to the first added node (last node).  
How do you arrive at the first added node? 
Arriving at the first node is not the challenge. The challenge is that once you point the first node to the new head node, you will never be able to get the first node again.
After much trial and error, I solved the problem with the below:

class Node:
    def __init__(self, data, next_node=None):
        self.data = data
        self.next_node = next_node

class CircularSinglyLinkedList:
    def __init__(self):
        self.head_node = None

    def add(self, data):
        if not self.head_node:
            new_node = Node(data)
            self.head_node = new_node
            return

    def add_first(self, data):
        if not self.head_node:
            self.add(data)
            return
        old_head_node = self.head_node
        new_head_node = Node(data, old_head_node)
        self.head_node = new_head_node
        temp_node = old_head_node
        while temp_node.next_node:
            if temp_node.next_node == old_head_node:
                temp_node.next_node = new_head_node
                return
            temp_node = temp_node.next_node
        temp_node.next_node = new_head_node

mylist = CircularSinglyLinkedList()
mylist.add_first(20)
mylist.add_first(90)
mylist.add_first(40)
mylist.add_first(10)

node1 = mylist.head_node
node2 = node1.next_node
node3 = node2.next_node
node4 = node3.next_node
node5 = node4.next_node

print(node1.data)
print(node2.data)
print(node3.data)
print(node4.data)
print(node5.data)

In the while loop, the statement if temp_node.next_node == old_head_node checks if we've gotten to the first node. Because the second time the add_first method is called, the first node will be pointing to the old_head node. But the key is that we start the iteration from the old_head node rather than from the new head node.
Note, the first time the add_first method is called, the code in the if statement won't be executed. This is because by the time we reach the first node, it will invalidate temp_node.next_node. Simply because at that point, it points to None.

Next, we will implement the add_last method. Rather than adding new elements to the beginning of the list, it adds new elements to the end of the list. This means the first node will always be the head node. But in this one, we won't only be pointing the first node to the new node or the second node to the new node, we will also be pointing the new node to the first node.

class Node:
    def __init__(self, data, next_node=None):
        self.data = data
        self.next_node = next_node

class CircularSinglyLinkedList:
    def __init__(self):
        self.head_node = None

    def add(self, data):
        if not self.head_node:
            new_node = Node(data)
            self.head_node = new_node
            return

    def add_first(self, data):
        if not self.head_node:
            self.add(data)
            return
        old_head_node = self.head_node
        new_head_node = Node(data, old_head_node)
        self.head_node = new_head_node
        temp_node = old_head_node
        while temp_node.next_node:
            if temp_node.next_node == old_head_node:
                temp_node.next_node = new_head_node
                return
            temp_node = temp_node.next_node
        temp_node.next_node = new_head_node

    def add_last(self, data):
        if not self.head_node:
            self.add(data)
            return
        temp_node = self.head_node
        while temp_node.next_node:
            if not temp_node.next_node.next_node or temp_node.next_node.next_node == self.head_node:
                new_node = Node(data, self.head_node)
                temp_node.next_node.next_node = new_node
                return
            temp_node = temp_node.next_node
        new_node = Node(data, self.head_node)
        temp_node.next_node = new_node

mylist = CircularSinglyLinkedList()
mylist.add_last(20)
mylist.add_last(90)
mylist.add_last(40)
mylist.add_last(10)

node1 = mylist.head_node
node2 = node1.next_node
node3 = node2.next_node
node4 = node3.next_node
node5 = node4.next_node

print(node1.data)
print(node2.data)
print(node3.data)
print(node4.data)
print(node5.data)

Next, we will implement adding at index. 
I think the implementation will be the same as for the singly linked list. I just need a way to break out of the loop.
loop. kkk out I didn't need to break out of any 


class Node:
    def __init__(self, data, next_node=None):
        self.data = data
        self.next_node = next_node

class CircularSinglyLinkedList:
    def __init__(self):
        self.head_node = None
        self.count = 0

    def add(self, data):
        if not self.head_node:
            new_node = Node(data)
            self.head_node = new_node
            self.count += 1
            return
        self.add(data)

    def add_first(self, data):
        if not self.head_node:
            self.add(data)
            return
        old_head_node = self.head_node
        new_head_node = Node(data, old_head_node)
        self.head_node = new_head_node
        temp_node = old_head_node
        while temp_node.next_node:
            if temp_node.next_node == old_head_node:
                temp_node.next_node = new_head_node
                self.count += 1
                return
            temp_node = temp_node.next_node
        temp_node.next_node = new_head_node
        self.count += 1

    def add_last(self, data):
        if not self.head_node:
            self.add(data)
            return
        temp_node = self.head_node
        while temp_node.next_node:
            if not temp_node.next_node.next_node or temp_node.next_node.next_node == self.head_node:
                new_node = Node(data, self.head_node)
                temp_node.next_node.next_node = new_node
                self.count += 1
                return
            temp_node = temp_node.next_node
        new_node = Node(data, self.head_node)
        temp_node.next_node = new_node
        self.count += 1

    def add_at_index(self, data, index):
        count = 1
        temp_node = self.head_node
        if index > self.count:
            raise IndexError("Index out of range")
        if index == 0:
            new_node = Node(data, temp_node)
            self.head_node = new_node
            self.count += 1
            return
        while temp_node.next_node:
            if count == index:
                new_node = Node(data, temp_node.next_node)
                temp_node.next_node = new_node
                self.count += 1
                return
            temp_node = temp_node.next_node
            count += 1
        new_node = Node(data, temp_node.next_node)
        temp_node.next_node = new_node
        self.count += 1

mylist = CircularSinglyLinkedList()
mylist.add_last(20)
mylist.add_last(90)
mylist.add_last(40)
#mylist.add_last(10)
mylist.add_at_index(100, 4)

node1 = mylist.head_node
node2 = node1.next_node
node3 = node2.next_node
node4 = node3.next_node
node5 = node4.next_node

print(node1.data)
print(node2.data)
print(node3.data)
print(node4.data)
print(node5.data)

Sorry, at least for when index is 0 and when index is equal to self.count, it wont work. The data will be added, but remeber you still need to connect the last added data to the head node or perhaps first node.
So what will happen is that you might need to integrate the add_first and add_last methods.
Let me see how that will go.
That's what I did and it solved the problem.

def add_at_index(self, data, index):
        count = 1
        temp_node = self.head_node
        if index > self.count:
            raise IndexError("Index out of range")
        if index == 0:
            self.add_first(data)
            return
        if index == self.count:
            self.add_last(data)
            return
        while temp_node.next_node:
            if count == index:
                new_node = Node(data, temp_node.next_node)
                temp_node.next_node = new_node
                self.count += 1
                return
            temp_node = temp_node.next_node
            count += 1
                   
For the delete_at_index method, while index 0 will delete the first index, because the head or first node will still be holding a refrence to the first node, we will need to manipulate that node too.
The below solves the problem:

def delete_at_index(self, index):
        count = 1
        temp_node = self.head_node
        old_head_node = self.head_node
        if index >= self.count:
            raise IndexError("Index out of range")
        if index == 0:
            self.head_node = temp_node.next_node
        while temp_node.next_node:
            if count == index:
                temp_node.next_node = temp_node.next_node.next_node
                return
            if index == 0 and temp_node.next_node == old_head_node:
                temp_node.next_node = self.head_node
                return
            temp_node = temp_node.next_node
            count += 1











