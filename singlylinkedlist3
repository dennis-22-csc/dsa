I'll need to implement a new add_first and add_last method for the singly linked list class.
Given a non empty list, the add_first method should replace the current head_node with the new node.
Given a non empty list, the add_last method should replace the current tail node with the new node.
Which ever method is called, the head_node should remain the first_node.
We will start with the below starter codes:

class Node:
    def __init__(self, node_data, next_node=None):
        self.node_data = node_data
        self.next_node = next_node

class SinglyLinkedList:
    def __init__(self):
        self.head_node = None
        
If the list is empty, an internal add method should be called to create the first node.

Below is the implementation:

class Node:
    def __init__(self, node_data, next_node=None):
        self.node_data = node_data
        self.next_node = next_node

class SinglyLinkedList:
    def __init__(self):
        self.head_node = None
    def add(self, data):
        if not self.head_node:
            new_node = Node(data)
            self.head_node = new_node
            return
        self.add_last(data)
    def add_first(self, data):
        if not self.head_node:
            self.add(data)
            return
        new_node = Node(data, self.head_node)
        self.head_node = new_node
    def add_last(self, data):
        if not self.head_node:
            self.add(data)
            return
        temp_node = self.head_node
        while temp_node.next_node:
            temp_node = temp_node.next_node
        new_node = Node(data)
        temp_node.next_node = new_node

mylist = SinglyLinkedList()
mylist.add(90)
mylist.add_first(20)
mylist.add_last(40)
mylist.add(10)

node1 = mylist.head_node
node2 = node1.next_node
node3 = node2.next_node
node4 = node3.next_node

print(node1.node_data)
print(node2.node_data)
print(node3.node_data)
print(node4.node_data)


In the below, the class has been made iterable:

class Node:
    def __init__(self, node_data, next_node=None):
        self.node_data = node_data
        self.next_node = next_node

class SinglyLinkedList:
    def __init__(self):
        self.head_node = None
        self.current_node = None
    def add(self, data):
        if not self.head_node:
            new_node = Node(data)
            self.head_node = new_node
            return
        self.add_last(data)
    def add_first(self, data):
        if not self.head_node:
            self.add(data)
            return
        new_node = Node(data, self.head_node)
        self.head_node = new_node
    def add_last(self, data):
        if not self.head_node:
            self.add(data)
            return
        temp_node = self.head_node
        while temp_node.next_node:
            temp_node = temp_node.next_node
        new_node = Node(data)
        temp_node.next_node = new_node
    def __iter__(self):
        self.current_node = self.head_node
        return self
    def __next__(self):
        if not self.current_node:
            raise StopIteration
        data = self.current_node.node_data
        self.current_node = self.current_node.next_node
        return data

mylist = SinglyLinkedList()
mylist.add(90)
mylist.add_first(20)
mylist.add_last(40)
mylist.add(10)

for i in mylist:
    print(i)
    

In the below, the add_at_index and the delete_at_index methods have been introduced 

class Node:
    def __init__(self, node_data, next_node=None):
        self.node_data = node_data
        self.next_node = next_node

class SinglyLinkedList:
    def __init__(self):
        self.head_node = None
        self.current_node = None
        self.count = 0

    def add(self, data):
        if not self.head_node:
            new_node = Node(data)
            self.head_node = new_node
            self.count += 1
            return
        self.add_last(data)
        self.count += 1

    def add_first(self, data):
        if not self.head_node:
            self.add(data)
            return
        new_node = Node(data, self.head_node)
        self.head_node = new_node
        self.count += 1

    def add_last(self, data):
        if not self.head_node:
            self.add(data)
            return
        temp_node = self.head_node
        while temp_node.next_node:
            temp_node = temp_node.next_node
        new_node = Node(data)
        temp_node.next_node = new_node
        self.count += 1

    def __iter__(self):
        self.current_node = self.head_node
        return self

    def __next__(self):
        if not self.current_node:
            raise StopIteration
        data = self.current_node.node_data
        self.current_node = self.current_node.next_node
        return data

    def add_at_index(self, data, index):
        count = 1
        temp_node = self.head_node
        if index > self.count:
            raise IndexError("Index out of range")
        if index == 0:
            new_node = Node(data, temp_node)
            self.head_node = new_node
            self.count += 1
            return
        while temp_node.next_node:
            if count == index:
                new_node = Node(data, temp_node.next_node)
                temp_node.next_node = new_node
                self.count += 1
                return
            temp_node = temp_node.next_node
            count += 1
        new_node = Node(data, temp_node.next_node)
        temp_node.next_node = new_node
        self.count += 1

    def delete_at_index(self, index):
        count = 1
        temp_node = self.head_node
        if index >= self.count:
            raise IndexError("Index out of range")
        if index == 0:
            self.head_node = temp_node.next_node
            return
        while temp_node.next_node:
            if count == index:
                temp_node.next_node = temp_node.next_node.next_node
                return
            temp_node = temp_node.next_node
            count += 1

mylist = SinglyLinkedList()
mylist.add(90)
mylist.add_first(20)
mylist.add_last(40)
mylist.add(10)
mylist.add_at_index(100, 3)
mylist.delete_at_index(4)

for i in mylist:
    print(i)

With this, we are done implementing  the singly linked list class.


