I've successfully implemented a singly linked list in python together with common operations such as add to first, add to last, add using index, delete using index.
But it became obvious I didn't understand certain things. Specifically, the effects of the variables I was switching.
This note is my attempt to understand them.

I will start by exploring objects and their addresses.
We will create a node class that will be used to create node objects. Then we will explore the relationsships between the objects, their addresses and the variables storing them.

The below creates a Node class:

class Node:
    def __init__(self, node_data):
        self.node_data = node_data
        
This class will be used to create node objects.
An object is typically created and stored in a variable. The below code demonstrates this:
class Node:
    def __init__(self, node_data):
        self.node_data = node_data

# Object creation
node1 = Node(20) # object created and stored in a variable node1

But what you should also know is that the object itself is not been stored in a variable. What is instead being stored in a variable is the address of the object. In the below code, the content of the node1 variable is printed. You will see its an address.

class Node:
    def __init__(self, node_data):
        self.node_data = node_data

# Object creation
node1 = Node(20) # object created and stored in a variable node1

# Print content of variable
print(node1)

The output will be something like: <__main__.Node object at 0x7fd900a70760>
From the output, the address of the object is 0x7fd900a70760.

What you should also know is that a variable storing the address of an object can be used to store the address of another object in the same function/block of code. But to retain the address of the first object, the address needs to be stored in another variable. In the below code, we first print the value in the node1 variable, we next assign the value in node1 variable to a variable current_node, we next use the node1 variable to store another object, finally we print the value in the current_node variable and the value in the node1 variable.

class Node:
    def __init__(self, node_data):
        self.node_data = node_data

# Object creation
node1 = Node(20) # object created and stored in a variable node1

# Print content of node1 variable
print(node1)

# Store content of node1 variable in a variable current_node
current_node = node1

# Reuse node1 variable for new object
node1 = Node(20)

# Print content of current_node variable
print(current_node) # Should be the same as first node1

# Print content of node1 variable
print(node1) # Should be different from first node1

The output will look like:

<__main__.Node object at 0x7ff551090760>
<__main__.Node object at 0x7ff551090760>
<__main__.Node object at 0x7ff5510929e0>

The point is that don't see variables as containers permanently associated with an object.

Another thing you need to know is that you can store an address that is in one variable inside another variable and use the other variable to manipualte the object associated with the adderess while still retaining the address of the original variable. The below code demonstrates this:

class Node:
    def __init__(self, node_data):
        self.node_data = node_data

# Object creation
node1 = Node(20) # object created and stored in a variable node1

# Print content of node1 variable
print(node1)

# Store content of node1 variable in a variable current_node
current_node = node1

# Print value in current_node variable
print(current_node) # Should be the same as node1

# Changing the value of an attribute of the object
current_node.node_data = 30

# reusing current_node
current_node = Node(40)

# Print content of current_node variable
print(current_node) # Should be different from node1

# Print content of node1 variable
print(node1) # Should remain the same as original

# Print node1 data
print(node1.node_data) # Should be 30 instead of 20

Now lets implement a singly linked list class.

class Node:
    def __init__(self, node_data, next_node=None):
        self.node_data = node_data
        self.next_node = next_node

class SinglyLinkedList:
    def __init__(self):
        self.head_node = None

We are using an head_node property instead of a current_node property.
We will soon see the importance of this.
Next, we need to implement methods we will be using to insert data. Instead of us creating a generic add method, we will create a specifc add_last and add_first method.
The behaviour of the add_last method will be such that the last added data will be the first data to be displayed. That is, it will be the head node.
For the add_first method, the first added data will be the first data to be displayed. It will be the head node.
In linked lists, the head node is the starting point for displaying data.
For the add_last method, the node of the last added data will be the head node. To display the previously added data, the node of the previously added data needs to be next node of the head node.
Each time a new data is added, there will be a new head node. The new head node will be the node of the last added data. That node will always have a nex node pointing to the previous head node.
To achieve this, the address of the current head node needs to be stored in another variable. A local variable. The variable storing the address of the current head node will now be used to store the address of the new node effectively changing the head node.
But the next_node property of the new node will need to point to the previous head node.

class Node:
    def __init__(self, node_data, next_node=None):
        self.node_data = node_data
        self.next_node = next_node

class SinglyLinkedList:
    def __init__(self):
        self.head_node = None

    def add_last(self, data):
        if not self.head_node:
            new_node = Node(data)
            self.head_node = new_node
            return
        temp_node = self.head_node
        new_node = Node(data, temp_node)
        self.head_node = new_node

# Tester codes
mylist = SinglyLinkedList()
mylist.add_last(20)
mylist.add_last(90)
mylist.add_last(40)
mylist.add_last(10)

node1 = mylist.head_node
node2 = node1.next_node
node3 = node2.next_node
node4 = node3.next_node

print(node1.node_data)
print(node2.node_data)
print(node3.node_data)
print(node4.node_data)


For the add_first method, the node of the first added data will be the head node. But because that node has a next_node whose value  is none, we need to first change its value to point to the second added node. Then to make it possible for more nodes to be added, we will looping to the node whose next node value is none, after which we will chnage the next node property of that node to point to the new node whose next node property is also none.

class Node:
    def __init__(self, node_data, next_node=None):
        self.node_data = node_data
        self.next_node = next_node

class SinglyLinkedList:
    def __init__(self):
        self.head_node = None

    def add_last(self, data):
        if not self.head_node:
            new_node = Node(data)
            self.head_node = new_node
            return
        temp_node = self.head_node
        new_node = Node(data, temp_node)
        self.head_node = new_node
    def add_first(self, data):
        if not self.head_node:
            new_node = Node(data)
            self.head_node = new_node
            return
        new_node = Node(data)
        temp_node = self.head_node
        while temp_node.next_node:
            temp_node = temp_node.next_node
        temp_node.next_node = new_node

# Tester codes
mylist = SinglyLinkedList()
mylist.add_first(20)
mylist.add_first(90)
mylist.add_first(40)
mylist.add_first(10)

node1 = mylist.head_node
node2 = node1.next_node
node3 = node2.next_node
node4 = node3.next_node

print(node1.node_data)
print(node2.node_data)
print(node3.node_data)
print(node4.node_data)

Next, we will make the class iterable.

class Node:
    def __init__(self, node_data, next_node=None):
        self.node_data = node_data
        self.next_node = next_node

class SinglyLinkedList:
    def __init__(self):
        self.head_node = None

    def add_last(self, data):
        if not self.head_node:
            new_node = Node(data)
            self.head_node = new_node
            return
        temp_node = self.head_node
        new_node = Node(data, temp_node)
        self.head_node = new_node
    def add_first(self, data):
        if not self.head_node:
            new_node = Node(data)
            self.head_node = new_node
            return
        new_node = Node(data)
        temp_node = self.head_node
        while temp_node.next_node:
            temp_node = temp_node.next_node
        temp_node.next_node = new_node
    def __iter__(self):
        return self
    def __next__(self):
        if not self.head_node:
            raise StopIteration
        data = self.head_node.node_data
        self.head_node = self.head_node.next_node
        return data

# Tester codes
mylist = SinglyLinkedList()
mylist.add_first(20)
mylist.add_first(90)
mylist.add_first(40)
mylist.add_first(10)

for i in mylist:
    print(i)
    
The __iter__ and __next__ methods have been introduced.
What you should know about the __next__ method is that each time it is called, it chnages the address in the head_node variable to the address of the next node. At some point, the next node will be None which means None will be assigned to the varibale. When that becomes the case, the next call to the method will throw a StopIteration exception and this stops the iteration.
Each time the __next__ method is called, the data of the current head is returned.

Next, we will implement the add_at_index method.
Index starts from 0. Each data are stored in index 0, 1, 2, and so on.
The data we currently have have been stored in index 0, 1, 2, 3.
The head currently occupies index 0.
To store data using index, we can use a combination of iterating through the nodes and checking if the index of the ietrated node matches the supplied index. Let's assume the current iterated node is that whose address is associated with index 2, now, we want to assign the new 
node to index 2. The currently iterated node is only in index 2 because it is a next_node to the previous node. We need to intead make it the next node of the new node while making the new node the next node of the previous node. Question: How do we access the previous node from the currently iterated node?
We can't. So we will perform the operation when we get to the index before the supplied index.
The index before the supplied index will be associate with a temp node. This temp_node will have a next_node that needs to be chnaged to the new node. The newnode then needs to have a next node that points to the next node of temp node.

class Node:
    def __init__(self, node_data, next_node=None):
        self.node_data = node_data
        self.next_node = next_node

class SinglyLinkedList:
    def __init__(self):
        self.head_node = None

    def add_last(self, data):
        if not self.head_node:
            new_node = Node(data)
            self.head_node = new_node
            return
        temp_node = self.head_node
        new_node = Node(data, temp_node)
        self.head_node = new_node
    def add_first(self, data):
        if not self.head_node:
            new_node = Node(data)
            self.head_node = new_node
            return
        new_node = Node(data)
        temp_node = self.head_node
        while temp_node.next_node:
            temp_node = temp_node.next_node
        temp_node.next_node = new_node
    def add_at_index(self, data, index):
        count = 1
        temp_node = self.head_node
        while temp_node.next_node:
            if count == index:
                new_node = Node(data, temp_node.next_node)
                temp_node.next_node = new_node
                return
            temp_node = temp_node.next_node
            count += 1

    def __iter__(self):
        return self
    def __next__(self):
        if not self.head_node:
            raise StopIteration
        data = self.head_node.node_data
        self.head_node = self.head_node.next_node
        return data

# Tester codes
mylist = SinglyLinkedList()
mylist.add_first(20)
mylist.add_first(90)
mylist.add_first(40)
mylist.add_first(10)
mylist.add_at_index(100, 2)
for i in mylist:
    print(i)
    
Now, you need to understand that this code won't work when the supplied index is 0 nor will it work when the supplied index is graeter than or equal to the  number of elements in the list.
We therefore need to implement for those cases.
To implement for index 0, we will simply say if the supplied index is 0, make the new node to have its next node point to the head node, then assign the new node to the head_node variable.

class Node:
    def __init__(self, node_data, next_node=None):
        self.node_data = node_data
        self.next_node = next_node

class SinglyLinkedList:
    def __init__(self):
        self.head_node = None

    def add_last(self, data):
        if not self.head_node:
            new_node = Node(data)
            self.head_node = new_node
            return
        temp_node = self.head_node
        new_node = Node(data, temp_node)
        self.head_node = new_node
    def add_first(self, data):
        if not self.head_node:
            new_node = Node(data)
            self.head_node = new_node
            return
        new_node = Node(data)
        temp_node = self.head_node
        while temp_node.next_node:
            temp_node = temp_node.next_node
        temp_node.next_node = new_node
    def add_at_index(self, data, index):
        count = 1
        temp_node = self.head_node
        if index == 0:
            new_node = Node(data, temp_node)
            self.head_node = new_node
            return
        while temp_node.next_node:
            if count == index:
                new_node = Node(data, temp_node.next_node)
                temp_node.next_node = new_node
                return
            temp_node = temp_node.next_node
            count += 1

    def __iter__(self):
        return self
    def __next__(self):
        if not self.head_node:
            raise StopIteration
        data = self.head_node.node_data
        self.head_node = self.head_node.next_node
        return data

# Tester codes
mylist = SinglyLinkedList()
mylist.add_first(20)
mylist.add_first(90)
mylist.add_first(40)
mylist.add_first(10)
mylist.add_at_index(100, 0)
for i in mylist:
    print(i)
    
To implement for when  the supplied index is the same as the number of elements in the list, we need to understand what happens when the supplied index is the same as the number of elements in the list.
At the moment, there are four elements in the list.
The while loop depends on there being a value in temp_node.next_node.
The problem is that if we want to add the new element to index 4, we can't do it inside the while loop.
This is because when temp_node is the node associated with index 4, temp_node.next_node will be None. So the codes in the while loop won''t be executed at all.
So we need to define the same code inside the while loop outside the while loop.

class Node:
    def __init__(self, node_data, next_node=None):
        self.node_data = node_data
        self.next_node = next_node

class SinglyLinkedList:
    def __init__(self):
        self.head_node = None

    def add_last(self, data):
        if not self.head_node:
            new_node = Node(data)
            self.head_node = new_node
            return
        temp_node = self.head_node
        new_node = Node(data, temp_node)
        self.head_node = new_node
    def add_first(self, data):
        if not self.head_node:
            new_node = Node(data)
            self.head_node = new_node
            return
        new_node = Node(data)
        temp_node = self.head_node
        while temp_node.next_node:
            temp_node = temp_node.next_node
        temp_node.next_node = new_node
    def add_at_index(self, data, index):
        count = 1
        temp_node = self.head_node
        if index == 0:
            new_node = Node(data, temp_node)
            self.head_node = new_node
            return
        while temp_node.next_node:
            if count == index:
                new_node = Node(data, temp_node.next_node)
                temp_node.next_node = new_node
                return
            temp_node = temp_node.next_node
            count += 1
        new_node = Node(data, temp_node.next_node)
        temp_node.next_node = new_node

    def __iter__(self):
        return self
    def __next__(self):
        if not self.head_node:
            raise StopIteration
        data = self.head_node.node_data
        self.head_node = self.head_node.next_node
        return data

# Tester codes
mylist = SinglyLinkedList()
mylist.add_first(20)
mylist.add_first(90)
mylist.add_first(40)
mylist.add_first(10)
mylist.add_at_index(100, 4)
for i in mylist:
    print(i)
    
The last case we will address is when the supplied index is graeter than the number of elements in the list.
In this case, all we need do is raise an exception.But how do we know that the supplied index is graeter than the number of elements in the list? With our current implemtation, we can't know. We will introduce a counter variable that will be incremented each time new data is inserted.


class Node:
    def __init__(self, node_data, next_node=None):
        self.node_data = node_data
        self.next_node = next_node

class SinglyLinkedList:
    def __init__(self):
        self.head_node = None
        self.count = 0
    def add_last(self, data):
        if not self.head_node:
            new_node = Node(data)
            self.head_node = new_node
            self.count += 1
            return
        temp_node = self.head_node
        new_node = Node(data, temp_node)
        self.head_node = new_node
        self.count += 1
    def add_first(self, data):
        if not self.head_node:
            new_node = Node(data)
            self.head_node = new_node
            self.count += 1
            return
        new_node = Node(data)
        temp_node = self.head_node
        while temp_node.next_node:
            temp_node = temp_node.next_node
        temp_node.next_node = new_node
        self.count += 1
    def add_at_index(self, data, index):
        count = 1
        temp_node = self.head_node
        if index > self.count:
            raise IndexError("Index out of range")
        if index == 0:
            new_node = Node(data, temp_node)
            self.head_node = new_node
            self.count += 1
            return
        while temp_node.next_node:
            if count == index:
                new_node = Node(data, temp_node.next_node)
                temp_node.next_node = new_node
                self.count += 1
                return
            temp_node = temp_node.next_node
            count += 1
        new_node = Node(data, temp_node.next_node)
        temp_node.next_node = new_node
        self.count += 1
    def __iter__(self):
        return self
    def __next__(self):
        if not self.head_node:
            raise StopIteration
        data = self.head_node.node_data
        self.head_node = self.head_node.next_node
        return data

# Tester codes
mylist = SinglyLinkedList()
mylist.add_first(20)
mylist.add_first(90)
mylist.add_first(40)
mylist.add_first(10)
mylist.add_at_index(100, 5)
for i in mylist:
    print(i)
    
Next, we will look at deleting element using index.
In a linked list, an element only exist because it is pointed to.  If it is not pointed to by another element in the list, it won't exist.
So let's assume the element to be deleted is currently being pointed to by element in index 1, it means we will make the elemtn in index 1 to instead point to the element in index 3, thereby cutting off the element in index 2.  We can access the element in index 3 using the next node property of the element in index 2.

class Node:
    def __init__(self, node_data, next_node=None):
        self.node_data = node_data
        self.next_node = next_node

class SinglyLinkedList:
    def __init__(self):
        self.head_node = None
        self.count = 0
    def add_last(self, data):
        if not self.head_node:
            new_node = Node(data)
            self.head_node = new_node
            self.count += 1
            return
        temp_node = self.head_node
        new_node = Node(data, temp_node)
        self.head_node = new_node
        self.count += 1
    def add_first(self, data):
        if not self.head_node:
            new_node = Node(data)
            self.head_node = new_node
            self.count += 1
            return
        new_node = Node(data)
        temp_node = self.head_node
        while temp_node.next_node:
            temp_node = temp_node.next_node
        temp_node.next_node = new_node
        self.count += 1
    def add_at_index(self, data, index):
        count = 1
        temp_node = self.head_node
        if index > self.count:
            raise IndexError("Index out of range")
        if index == 0:
            new_node = Node(data, temp_node)
            self.head_node = new_node
            self.count += 1
            return
        while temp_node.next_node:
            if count == index:
                new_node = Node(data, temp_node.next_node)
                temp_node.next_node = new_node
                self.count += 1
                return
            temp_node = temp_node.next_node
            count += 1
        new_node = Node(data, temp_node.next_node)
        temp_node.next_node = new_node
        self.count += 1
    def delete_at_index(self, index):
        count = 1
        temp_node = self.head_node
        while temp_node.next_node:
            if count == index:
                temp_node.next_node = temp_node.next_node.next_node
                return
            temp_node = temp_node.next_node
            count += 1
    def __iter__(self):
        return self
    def __next__(self):
        if not self.head_node:
            raise StopIteration
        data = self.head_node.node_data
        self.head_node = self.head_node.next_node
        return data

# Tester codes
mylist = SinglyLinkedList()
mylist.add_first(20)
mylist.add_first(90)
mylist.add_first(40)
mylist.add_first(10)
mylist.delete_at_index(2)
for i in mylist:
    print(i)


Now, the code won't work when index is 0 neither will it work when index is equal to the number of elements in the list, neither will it work when index is out of bounds.
The below adjusts for each of those cases.

class Node:
    def __init__(self, node_data, next_node=None):
        self.node_data = node_data
        self.next_node = next_node

class SinglyLinkedList:
    def __init__(self):
        self.head_node = None
        self.count = 0
    def add_last(self, data):
        if not self.head_node:
            new_node = Node(data)
            self.head_node = new_node
            self.count += 1
            return
        temp_node = self.head_node
        new_node = Node(data, temp_node)
        self.head_node = new_node
        self.count += 1
    def add_first(self, data):
        if not self.head_node:
            new_node = Node(data)
            self.head_node = new_node
            self.count += 1
            return
        new_node = Node(data)
        temp_node = self.head_node
        while temp_node.next_node:
            temp_node = temp_node.next_node
        temp_node.next_node = new_node
        self.count += 1
    def add_at_index(self, data, index):
        count = 1
        temp_node = self.head_node
        if index > self.count:
            raise IndexError("Index out of range")
        if index == 0:
            new_node = Node(data, temp_node)
            self.head_node = new_node
            self.count += 1
            return
        while temp_node.next_node:
            if count == index:
                new_node = Node(data, temp_node.next_node)
                temp_node.next_node = new_node
                self.count += 1
                return
            temp_node = temp_node.next_node
            count += 1
        new_node = Node(data, temp_node.next_node)
        temp_node.next_node = new_node
        self.count += 1
    def delete_at_index(self, index):
        count = 1
        temp_node = self.head_node
        if index >= self.count:
            raise IndexError("Index out of range")
        if index == 0:
            self.head_node = temp_node.next_node
            return
        while temp_node.next_node:
            if count == index:
                temp_node.next_node = temp_node.next_node.next_node
                return
            temp_node = temp_node.next_node
            count += 1

    def __iter__(self):
        return self
    def __next__(self):
        if not self.head_node:
            raise StopIteration
        data = self.head_node.node_data
        self.head_node = self.head_node.next_node
        return data

# Tester codes
mylist = SinglyLinkedList()
mylist.add_first(20)
mylist.add_first(90)
mylist.add_first(40)
mylist.add_first(10)
#mylist.delete_at_index(0)
mylist.delete_at_index(3)
#mylist.delete_at_index(4)
for i in mylist:
    print(i)

With this, we are done with the implementation of the singly linked list class.


















